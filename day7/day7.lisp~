 
(defun get-file (filename)
  (with-open-file (stream filename)
    (loop for line = (read-line stream nil)
       while line
       collect line)))

(defun parse-data (data)
  (mapcar #'(lambda (x)
	      (list (subseq x 5 6)
		    (subseq x 36 37)))
	  (get-file data)))

(defun dependant? (x data func)
  (if (member x (mapcar func data) :test #'string=)
      t
      'f))

(defun root-options (x data)
  (remove x data :test-not #'string= :key #'first))

(defun root-remove (x data)
  (remove x data :test #'string= :key #'first))

(defun answer-loop (data contents res avail)
  
  (cond
    ((or (null data) (null contents))
     res)

    ((not (null avail))
     (let ((next (car (sort avail #'string<))))
       (let ((options (sort (root-options next data) #'string<)))
	 (answer-loop
	  (root-remove next data)
	  (remove next contents :test #'string=)
	  (cons next res)
	  (append (cdr options) avail)))))
    (t
     res)))
    
(defun answer (data)
  (let ((lst (remove-duplicates
	      (union (mapcar #'car data) (mapcar #'cadr data))
	      :test #'string=)))
    (let ((root (find-if #'(lambda (x) (dependant? x data #'cadr)) lst)))
      (answer-loop
       (root-remove root data)
       (remove root lst :test #'string=)
       '() (mapcar #'cadr (root-options root data))))))
